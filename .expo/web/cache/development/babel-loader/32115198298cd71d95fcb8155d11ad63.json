{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nimport useTheme from \"../../../utils/useTheme\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlay = _ref.cardOverlay,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      mode = _ref.mode,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.route;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.route;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.route;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","useTheme","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isCurrentHeaderShown","previousScene","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","undefined","StyleSheet","absoluteFill","View","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport useTheme from '../../../utils/useTheme';\nimport type {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}