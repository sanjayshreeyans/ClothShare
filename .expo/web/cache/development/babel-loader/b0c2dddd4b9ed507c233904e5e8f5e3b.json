{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EventEmitter } from 'fbemitter';\nimport React from 'react';\nimport NativeAppLoading from \"./AppLoadingNativeWrapper\";\n\nvar AppLoading = function (_React$Component) {\n  _inherits(AppLoading, _React$Component);\n\n  var _super = _createSuper(AppLoading);\n\n  function AppLoading() {\n    var _this;\n\n    _classCallCheck(this, AppLoading);\n\n    _this = _super.apply(this, arguments);\n    _this._isMounted = false;\n\n    _this._startLoadingAppResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.props.onFinish) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.props.startAsync());\n\n            case 5:\n              _context.next = 16;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (_this._isMounted) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 11:\n              if (!_this.props.onError) {\n                _context.next = 15;\n                break;\n              }\n\n              _this.props.onError(_context.t0);\n\n              _context.next = 16;\n              break;\n\n            case 15:\n              throw _context.t0;\n\n            case 16:\n              _context.prev = 16;\n\n              if (_this._isMounted) {\n                _context.next = 19;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 19:\n              if (_this.props.onFinish) {\n                _this.props.onFinish();\n              }\n\n              return _context.finish(16);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 7, 16, 21]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(AppLoading, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n\n      _emitEvent('componentDidMount');\n\n      if (this.props.startAsync) {\n        this._startLoadingAppResourcesAsync().catch(function (error) {\n          console.error(\"AppLoading threw an unexpected error when loading:\\n\" + error.stack);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n\n      _emitEvent('componentWillUnmount');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NativeAppLoading, _extends({}, this.props));\n    }\n  }]);\n\n  return AppLoading;\n}(React.Component);\n\nexport { AppLoading as default };\nvar _lifecycleEmitter = null;\n\nfunction _emitEvent(event) {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter() {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n\n  return _lifecycleEmitter;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,WAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP;;IAeqBC,U;;;;;EAArB;IAAA;;IAAA;;;IACE,mBAAsB,KAAtB;;IAoBA,uCAAiC;MAAA;QAAA;UAAA;YAAA;cAAA,IAC1B,MAAKC,KAAL,CAAWC,QADe;gBAAA;gBAAA;cAAA;;cAAA,MAEvB,IAAIC,KAAJ,CAAU,gEAAV,CAFuB;;YAAA;cAAA;cAAA;cAAA,iCAMvB,MAAKF,KAAL,CAAWG,UAAX,EANuB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA,IAQxB,MAAKC,UARmB;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA,KAUzB,MAAKJ,KAAL,CAAWK,OAVc;gBAAA;gBAAA;cAAA;;cAW3B,MAAKL,KAAL,CAAWK,OAAX;;cAX2B;cAAA;;YAAA;cAAA;;YAAA;cAAA;;cAAA,IAgBxB,MAAKD,UAhBmB;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAoB7B,IAAI,MAAKJ,KAAL,CAAWC,QAAf,EAAyB;gBACvB,MAAKD,KAAL,CAAWC,QAAX;cACD;;cAtB4B;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAjC;;IArBF;EAkDC;;;;WA/CC,6BAAiB;MACf,KAAKG,UAAL,GAAkB,IAAlB;;MACAE,UAAU,CAAC,mBAAD,CAAV;;MAIA,IAAI,KAAKN,KAAL,CAAWG,UAAf,EAA2B;QACzB,KAAKI,8BAAL,GAAsCC,KAAtC,CAA4C,eAAK,EAAG;UAClDC,OAAO,CAACC,KAAR,0DAAqEA,KAAK,CAACC,KAA3E;QACD,CAFD;MAGD;IACF;;;WAED,gCAAoB;MAClB,KAAKP,UAAL,GAAkB,KAAlB;;MACAE,UAAU,CAAC,sBAAD,CAAV;IACD;;;WA4BD,kBAAM;MACJ,OAAOT,oBAACC,gBAAD,EAAiB,aAAK,KAAKE,KAAV,CAAjB,CAAP;IACD;;;;EAjDqCH,KAAK,CAACe,S;;SAAzBb,U;AAoDrB,IAAIc,iBAAiB,GAAwB,IAA7C;;AAEA,SAASP,UAAT,CAAoBQ,KAApB,EAAiC;EAC/B,IAAID,iBAAJ,EAAuB;IACrBA,iBAAiB,CAACE,IAAlB,CAAuBD,KAAvB;EACD;AACF;;AAED,OAAM,SAAUE,6BAAV,GAAuC;EAC3C,IAAI,CAACH,iBAAL,EAAwB;IACtBA,iBAAiB,GAAG,IAAIjB,YAAJ,EAApB;EACD;;EACD,OAAOiB,iBAAP;AACD","names":["EventEmitter","React","NativeAppLoading","AppLoading","props","onFinish","Error","startAsync","_isMounted","onError","_emitEvent","_startLoadingAppResourcesAsync","catch","console","error","stack","Component","_lifecycleEmitter","event","emit","getAppLoadingLifecycleEmitter"],"sourceRoot":"","sources":["../../src/launch/AppLoading.tsx"],"sourcesContent":["import { EventEmitter } from 'fbemitter';\nimport React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      startAsync?: () => Promise<void>;\n      onError?: (error: Error) => void;\n      onFinish?: () => void;\n      autoHideSplash?: boolean;\n    }\n  | {\n      startAsync: null;\n      onError: null;\n      onFinish: null;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n    _emitEvent('componentDidMount');\n\n    // startAsync is optional, you can do this process manually if you prefer (this is mainly for\n    // backwards compatibility and it is not recommended)\n    if (this.props.startAsync) {\n      this._startLoadingAppResourcesAsync().catch(error => {\n        console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    _emitEvent('componentWillUnmount');\n  }\n\n  _startLoadingAppResourcesAsync = async () => {\n    if (!this.props.onFinish) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync!();\n    } catch (e) {\n      if (!this._isMounted) return;\n\n      if (this.props.onError) {\n        this.props.onError(e);\n      } else {\n        throw e;\n      }\n    } finally {\n      if (!this._isMounted) return;\n\n      // If we get to this point then we know that either there was no error, or the error was\n      // handled.\n      if (this.props.onFinish) {\n        this.props.onFinish();\n      }\n    }\n  };\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nlet _lifecycleEmitter: EventEmitter | null = null;\n\nfunction _emitEvent(event: string): void {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter(): EventEmitter {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}\n"]},"metadata":{},"sourceType":"module"}