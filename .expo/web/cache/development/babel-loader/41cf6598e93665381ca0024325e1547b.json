{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _regeneratorRuntime.async(function reload$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reload());\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function reloadFromCache() {\n  return _regeneratorRuntime.async(function reloadFromCache$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reloadFromCache());\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentUpdates.checkForUpdateAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentUpdates.checkForUpdateAsync());\n\n        case 4:\n          result = _context3.sent;\n\n          if (result) {\n            _context3.next = 7;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            isAvailable: false\n          });\n\n        case 7:\n          return _context3.abrupt(\"return\", {\n            isAvailable: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var _ref,\n      eventListener,\n      subscription,\n      result,\n      _args4 = arguments;\n\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;\n\n          if (ExponentUpdates.fetchUpdateAsync) {\n            _context4.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n\n        case 3:\n          if (eventListener && typeof eventListener === 'function') {\n            subscription = addListener(eventListener);\n          }\n\n          _context4.prev = 4;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(ExponentUpdates.fetchUpdateAsync());\n\n        case 7:\n          result = _context4.sent;\n\n        case 8:\n          _context4.prev = 8;\n          subscription && subscription.remove();\n          return _context4.finish(8);\n\n        case 11:\n          if (result) {\n            _context4.next = 13;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", {\n            isNew: false\n          });\n\n        case 13:\n          return _context4.abrupt(\"return\", {\n            isNew: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[4,, 8, 11]], Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(abiVersion) {\n  return _regeneratorRuntime.async(function clearUpdateCacheExperimentalAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExponentUpdates.clearUpdateCacheAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n\n        case 2:\n          return _context5.abrupt(\"return\", ExponentUpdates.clearUpdateCacheAsync(abiVersion));\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"mappings":"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","names":["RCTDeviceEventEmitter","UnavailabilityError","EventEmitter","ExponentUpdates","reload","reloadFromCache","checkForUpdateAsync","result","isAvailable","manifest","JSON","parse","fetchUpdateAsync","eventListener","subscription","addListener","remove","isNew","clearUpdateCacheExperimentalAsync","abiVersion","clearUpdateCacheAsync","_emitter","_getEmitter","_emitEvent","params","newParams","manifestString","Error","emit","listener","emitter","EventType","DOWNLOAD_STARTED","DOWNLOAD_PROGRESS","DOWNLOAD_FINISHED","NO_UPDATE_AVAILABLE","ERROR"],"sourceRoot":"","sources":["../../src/Updates/Updates.ts"],"sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"]},"metadata":{},"sourceType":"module"}