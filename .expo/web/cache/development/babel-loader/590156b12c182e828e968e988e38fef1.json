{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nvar NavigationEvents = function (_React$Component) {\n  _inherits(NavigationEvents, _React$Component);\n\n  var _super = _createSuper(NavigationEvents);\n\n  function NavigationEvents() {\n    var _this;\n\n    _classCallCheck(this, NavigationEvents);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"getPropListener\", function (eventName) {\n      return _this.props[EventNameToPropName[eventName]];\n    });\n\n    return _this;\n  }\n\n  _createClass(NavigationEvents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribeAll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.navigation !== prevProps.navigation) {\n        this.removeAll();\n        this.subscribeAll();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeAll();\n    }\n  }, {\n    key: \"subscribeAll\",\n    value: function subscribeAll() {\n      var _this2 = this;\n\n      this.subscriptions = {};\n      EventNames.forEach(function (eventName) {\n        _this2.subscriptions[eventName] = _this2.props.navigation.addListener(eventName, function () {\n          var propListener = _this2.getPropListener(eventName);\n\n          return propListener && propListener.apply(void 0, arguments);\n        });\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this3 = this;\n\n      EventNames.forEach(function (eventName) {\n        _this3.subscriptions[eventName].remove();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return NavigationEvents;\n}(React.Component);\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP;AAEA,IAAMC,mBAAmB,GAAG;EAC1BC,SAAS,EAAE,aADe;EAE1BC,QAAQ,EAAE,YAFgB;EAG1BC,QAAQ,EAAE,YAHgB;EAI1BC,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAPD,CAAYN,mBAAZM,CAAnB;;IAEME,gB;;;;;EAAyC;IAAA;;IAAA;;IAAA;MAAAC;IAAA;;IAAA;;IAAAC,kEAmB1BC,mBAAD;MAAA,OAAe,MAAKC,KAAL,CAAWZ,mBAAmB,CAACW,SAAD,CAA9B,CAAf;IAAA,CAnB2B;;IAAA;EAAA;;;;WAC7CE,6BAAoB;MAIlB,KAAKC,YAAL;IACD;;;WAEDC,4BAAmBC,SAAnBD,EAA8B;MAC5B,IAAI,KAAKH,KAAL,CAAWK,UAAX,KAA0BD,SAAS,CAACC,UAAxC,EAAoD;QAClD,KAAKC,SAAL;QACA,KAAKJ,YAAL;MACD;IACF;;;WAEDK,gCAAuB;MACrB,KAAKD,SAAL;IACD;;;WAIDJ,wBAAe;MAAA;;MACb,KAAKM,aAAL,GAAqB,EAArB;MAEAf,UAAU,CAACgB,OAAXhB,CAAoBM,mBAAD,EAAe;QAChC,OAAKS,aAAL,CAAmBT,SAAnB,IAAgC,OAAKC,KAAL,CAAWK,UAAX,CAAsBK,WAAtB,CAC9BX,SAD8B,EAE9B,YAAa;UACX,IAAMY,YAAY,GAAG,OAAKC,eAAL,CAAqBb,SAArB,CAArB;;UACA,OAAOY,YAAY,IAAIA,YAAY,MAAZA,mBAAvB;QAJ4B,EAAhC;MADF;IASD;;;WAEDL,qBAAY;MAAA;;MACVb,UAAU,CAACgB,OAAXhB,CAAoBM,mBAAD,EAAe;QAChC,OAAKS,aAAL,CAAmBT,SAAnB,EAA8Bc,MAA9B;MADF;IAGD;;;WAEDC,kBAAS;MACP,OAAO,IAAP;IACD;;;;EA3C4B5B,KAAK,CAAC6B,S;;AA8CrC,eAAe5B,cAAc,CAACS,gBAAD,CAA7B","names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","args","_defineProperty","eventName","props","componentDidMount","subscribeAll","componentDidUpdate","prevProps","navigation","removeAll","componentWillUnmount","subscriptions","forEach","addListener","propListener","getPropListener","remove","render","Component"],"sources":["NavigationEvents.js"],"sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}