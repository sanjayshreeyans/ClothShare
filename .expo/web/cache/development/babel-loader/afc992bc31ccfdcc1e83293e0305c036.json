{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Svg, { Defs, G, Path, Rect, Image, ClipPath, LinearGradient, Stop } from 'react-native-svg';\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\n\nvar renderLogo = function renderLogo(_ref) {\n  var size = _ref.size,\n      logo = _ref.logo,\n      logoSize = _ref.logoSize,\n      logoBackgroundColor = _ref.logoBackgroundColor,\n      logoMargin = _ref.logoMargin,\n      logoBorderRadius = _ref.logoBorderRadius;\n  var logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  var logoBackgroundSize = logoSize + logoMargin * 2;\n  var logoBackgroundBorderRadius = logoBorderRadius + logoMargin / logoSize * logoBorderRadius;\n  return React.createElement(G, {\n    x: logoPosition,\n    y: logoPosition\n  }, React.createElement(Defs, null, React.createElement(ClipPath, {\n    id: \"clip-logo-background\"\n  }, React.createElement(Rect, {\n    width: logoBackgroundSize,\n    height: logoBackgroundSize,\n    rx: logoBackgroundBorderRadius,\n    ry: logoBackgroundBorderRadius\n  })), React.createElement(ClipPath, {\n    id: \"clip-logo\"\n  }, React.createElement(Rect, {\n    width: logoSize,\n    height: logoSize,\n    rx: logoBorderRadius,\n    ry: logoBorderRadius\n  }))), React.createElement(G, null, React.createElement(Rect, {\n    width: logoBackgroundSize,\n    height: logoBackgroundSize,\n    fill: logoBackgroundColor,\n    clipPath: \"url(#clip-logo-background)\"\n  })), React.createElement(G, {\n    x: logoMargin,\n    y: logoMargin\n  }, React.createElement(Image, {\n    width: logoSize,\n    height: logoSize,\n    preserveAspectRatio: \"xMidYMid slice\",\n    href: logo,\n    clipPath: \"url(#clip-logo)\"\n  })));\n};\n\nvar QRCode = function QRCode(_ref2) {\n  var _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? 'this is a QR code' : _ref2$value,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 100 : _ref2$size,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'black' : _ref2$color,\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? 'white' : _ref2$backgroundColor,\n      logo = _ref2.logo,\n      _ref2$logoSize = _ref2.logoSize,\n      logoSize = _ref2$logoSize === void 0 ? size * 0.2 : _ref2$logoSize,\n      _ref2$logoBackgroundC = _ref2.logoBackgroundColor,\n      logoBackgroundColor = _ref2$logoBackgroundC === void 0 ? 'transparent' : _ref2$logoBackgroundC,\n      _ref2$logoMargin = _ref2.logoMargin,\n      logoMargin = _ref2$logoMargin === void 0 ? 2 : _ref2$logoMargin,\n      _ref2$logoBorderRadiu = _ref2.logoBorderRadius,\n      logoBorderRadius = _ref2$logoBorderRadiu === void 0 ? 0 : _ref2$logoBorderRadiu,\n      _ref2$quietZone = _ref2.quietZone,\n      quietZone = _ref2$quietZone === void 0 ? 0 : _ref2$quietZone,\n      _ref2$enableLinearGra = _ref2.enableLinearGradient,\n      enableLinearGradient = _ref2$enableLinearGra === void 0 ? false : _ref2$enableLinearGra,\n      _ref2$gradientDirecti = _ref2.gradientDirection,\n      gradientDirection = _ref2$gradientDirecti === void 0 ? ['0%', '0%', '100%', '100%'] : _ref2$gradientDirecti,\n      _ref2$linearGradient = _ref2.linearGradient,\n      linearGradient = _ref2$linearGradient === void 0 ? ['rgb(255,0,0)', 'rgb(0,255,255)'] : _ref2$linearGradient,\n      _ref2$ecl = _ref2.ecl,\n      ecl = _ref2$ecl === void 0 ? 'M' : _ref2$ecl,\n      getRef = _ref2.getRef,\n      onError = _ref2.onError;\n  var result = useMemo(function () {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n\n  if (!result) {\n    return null;\n  }\n\n  var path = result.path,\n      cellSize = result.cellSize;\n  return React.createElement(Svg, {\n    ref: getRef,\n    viewBox: [-quietZone, -quietZone, size + quietZone * 2, size + quietZone * 2].join(' '),\n    width: size,\n    height: size\n  }, React.createElement(Defs, null, React.createElement(LinearGradient, {\n    id: \"grad\",\n    x1: gradientDirection[0],\n    y1: gradientDirection[1],\n    x2: gradientDirection[2],\n    y2: gradientDirection[3]\n  }, React.createElement(Stop, {\n    offset: \"0\",\n    stopColor: linearGradient[0],\n    stopOpacity: \"1\"\n  }), React.createElement(Stop, {\n    offset: \"1\",\n    stopColor: linearGradient[1],\n    stopOpacity: \"1\"\n  }))), React.createElement(G, null, React.createElement(Rect, {\n    x: -quietZone,\n    y: -quietZone,\n    width: size + quietZone * 2,\n    height: size + quietZone * 2,\n    fill: backgroundColor\n  })), React.createElement(G, null, React.createElement(Path, {\n    d: path,\n    strokeLinecap: \"butt\",\n    stroke: enableLinearGradient ? 'url(#grad)' : color,\n    strokeWidth: cellSize\n  })), logo && renderLogo({\n    size: size,\n    logo: logo,\n    logoSize: logoSize,\n    logoBackgroundColor: logoBackgroundColor,\n    logoMargin: logoMargin,\n    logoBorderRadius: logoBorderRadius\n  }));\n};\n\nexport default QRCode;","map":{"version":3,"sources":["/Users/sanjayshreeyansgmail.com/Documents/Dev/react_egress-master 4/node_modules/react-native-qrcode-svg/src/index.js"],"names":["React","useMemo","Svg","Defs","G","Path","Rect","Image","ClipPath","LinearGradient","Stop","genMatrix","transformMatrixIntoPath","renderLogo","size","logo","logoSize","logoBackgroundColor","logoMargin","logoBorderRadius","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","QRCode","value","color","backgroundColor","quietZone","enableLinearGradient","gradientDirection","linearGradient","ecl","getRef","onError","result","error","path","cellSize","join"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport Svg, {\n  Defs,\n  G,\n  Path,\n  Rect,\n  Image,\n  ClipPath,\n  LinearGradient,\n  Stop\n} from 'react-native-svg'\nimport genMatrix from './genMatrix'\nimport transformMatrixIntoPath from './transformMatrixIntoPath'\n\nconst renderLogo = ({\n  size,\n  logo,\n  logoSize,\n  logoBackgroundColor,\n  logoMargin,\n  logoBorderRadius\n}) => {\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2\n  const logoBackgroundSize = logoSize + logoMargin * 2\n  const logoBackgroundBorderRadius =\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius\n\n  return (\n    <G x={logoPosition} y={logoPosition}>\n      <Defs>\n        <ClipPath id='clip-logo-background'>\n          <Rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBackgroundBorderRadius}\n            ry={logoBackgroundBorderRadius}\n          />\n        </ClipPath>\n        <ClipPath id='clip-logo'>\n          <Rect\n            width={logoSize}\n            height={logoSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n          />\n        </ClipPath>\n      </Defs>\n      <G>\n        <Rect\n          width={logoBackgroundSize}\n          height={logoBackgroundSize}\n          fill={logoBackgroundColor}\n          clipPath='url(#clip-logo-background)'\n        />\n      </G>\n      <G x={logoMargin} y={logoMargin}>\n        <Image\n          width={logoSize}\n          height={logoSize}\n          preserveAspectRatio='xMidYMid slice'\n          href={logo}\n          clipPath='url(#clip-logo)'\n        />\n      </G>\n    </G>\n  )\n}\n\nconst QRCode = ({\n  value = 'this is a QR code',\n  size = 100,\n  color = 'black',\n  backgroundColor = 'white',\n  logo,\n  logoSize = size * 0.2,\n  logoBackgroundColor = 'transparent',\n  logoMargin = 2,\n  logoBorderRadius = 0,\n  quietZone = 0,\n  enableLinearGradient = false,\n  gradientDirection = ['0%', '0%', '100%', '100%'],\n  linearGradient = ['rgb(255,0,0)', 'rgb(0,255,255)'],\n  ecl = 'M',\n  getRef,\n  onError\n}) => {\n  const result = useMemo(() => {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size)\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error)\n      } else {\n        // Pass the error when no handler presented\n        throw error\n      }\n    }\n  }, [value, size, ecl])\n\n  if (!result) {\n    return null\n  }\n\n  const { path, cellSize } = result\n\n  return (\n    <Svg\n      ref={getRef}\n      viewBox={[\n        -quietZone,\n        -quietZone,\n        size + quietZone * 2,\n        size + quietZone * 2\n      ].join(' ')}\n      width={size}\n      height={size}\n    >\n      <Defs>\n        <LinearGradient\n          id='grad'\n          x1={gradientDirection[0]}\n          y1={gradientDirection[1]}\n          x2={gradientDirection[2]}\n          y2={gradientDirection[3]}\n        >\n          <Stop offset='0' stopColor={linearGradient[0]} stopOpacity='1' />\n          <Stop offset='1' stopColor={linearGradient[1]} stopOpacity='1' />\n        </LinearGradient>\n      </Defs>\n      <G>\n        <Rect\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n        />\n      </G>\n      <G>\n        <Path\n          d={path}\n          strokeLinecap='butt'\n          stroke={enableLinearGradient ? 'url(#grad)' : color}\n          strokeWidth={cellSize}\n        />\n      </G>\n      {logo &&\n        renderLogo({\n          size,\n          logo,\n          logoSize,\n          logoBackgroundColor,\n          logoMargin,\n          logoBorderRadius\n        })}\n    </Svg>\n  )\n}\n\nexport default QRCode\n"]},"metadata":{},"sourceType":"module"}