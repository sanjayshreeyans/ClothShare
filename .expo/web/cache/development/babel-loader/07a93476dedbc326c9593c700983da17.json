{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventEmitter } from 'fbemitter';\nimport React from 'react';\nimport NativeAppLoading from \"./AppLoadingNativeWrapper\";\nvar AppLoading = function (_React$Component) {\n  _inherits(AppLoading, _React$Component);\n  var _super = _createSuper(AppLoading);\n  function AppLoading() {\n    var _this;\n    _classCallCheck(this, AppLoading);\n    _this = _super.apply(this, arguments);\n    _this._isMounted = false;\n    _this._startLoadingAppResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.props.onFinish) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.props.startAsync());\n            case 5:\n              _context.next = 16;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              if (_this._isMounted) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 11:\n              if (!_this.props.onError) {\n                _context.next = 15;\n                break;\n              }\n              _this.props.onError(_context.t0);\n              _context.next = 16;\n              break;\n            case 15:\n              throw _context.t0;\n            case 16:\n              _context.prev = 16;\n              if (_this._isMounted) {\n                _context.next = 19;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 19:\n              if (_this.props.onFinish) {\n                _this.props.onFinish();\n              }\n              return _context.finish(16);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 7, 16, 21]], Promise);\n    };\n    return _this;\n  }\n  _createClass(AppLoading, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      _emitEvent('componentDidMount');\n      if (this.props.startAsync) {\n        this._startLoadingAppResourcesAsync().catch(function (error) {\n          console.error(\"AppLoading threw an unexpected error when loading:\\n\" + error.stack);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      _emitEvent('componentWillUnmount');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NativeAppLoading, _extends({}, this.props));\n    }\n  }]);\n  return AppLoading;\n}(React.Component);\nexport { AppLoading as default };\nvar _lifecycleEmitter = null;\nfunction _emitEvent(event) {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\nexport function getAppLoadingLifecycleEmitter() {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,YAAY,QAAQ,WAAW;AACxC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,gBAAgB;AAAkC,IAepCC,UAAW;EAAA;EAAA;EAAhC;IAAA;IAAA;;IACE,gBAAU,GAAY,KAAK;IAoB3B,oCAA8B,GAAG;MAAA;QAAA;UAAA;YAAA;cAAA,IAC1B,MAAKC,KAAK,CAACC,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MAChB,IAAIC,KAAK,CAAC,gEAAgE,CAAC;YAAA;cAAA;cAAA;cAAA,iCAI3E,MAAKF,KAAK,CAACG,UAAW,EAAE;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA,IAEzB,MAAKC,UAAU;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA,KAEhB,MAAKJ,KAAK,CAACK,OAAO;gBAAA;gBAAA;cAAA;cACpB,MAAKL,KAAK,CAACK,OAAO,aAAG;cAAC;cAAA;YAAA;cAAA;YAAA;cAAA;cAAA,IAKnB,MAAKD,UAAU;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAIpB,IAAI,MAAKJ,KAAK,CAACC,QAAQ,EAAE;gBACvB,MAAKD,KAAK,CAACC,QAAQ,EAAE;;cACtB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEJ;IAAC;EAKJ;EAAC;IAAA;IAAA,OA/CC,6BAAiB;MACf,IAAI,CAACG,UAAU,GAAG,IAAI;MACtBE,UAAU,CAAC,mBAAmB,CAAC;MAI/B,IAAI,IAAI,CAACN,KAAK,CAACG,UAAU,EAAE;QACzB,IAAI,CAACI,8BAA8B,EAAE,CAACC,KAAK,CAAC,eAAK,EAAG;UAClDC,OAAO,CAACC,KAAK,0DAAwDA,KAAK,CAACC,KAAK,CAAG;QACrF,CAAC,CAAC;;IAEN;EAAC;IAAA;IAAA,OAED,gCAAoB;MAClB,IAAI,CAACP,UAAU,GAAG,KAAK;MACvBE,UAAU,CAAC,sBAAsB,CAAC;IACpC;EAAC;IAAA;IAAA,OA4BD,kBAAM;MACJ,OAAOT,oBAACC,gBAAgB,eAAK,IAAI,CAACE,KAAK,EAAI;IAC7C;EAAC;EAAA;AAAA,EAjDqCH,KAAK,CAACe,SAAgB;AAAA,SAAzCb,UAAW;AAoDhC,IAAIc,iBAAiB,GAAwB,IAAI;AAEjD,SAASP,UAAU,CAACQ,KAAa;EAC/B,IAAID,iBAAiB,EAAE;IACrBA,iBAAiB,CAACE,IAAI,CAACD,KAAK,CAAC;;AAEjC;AAEA,OAAM,SAAUE,6BAA6B;EAC3C,IAAI,CAACH,iBAAiB,EAAE;IACtBA,iBAAiB,GAAG,IAAIjB,YAAY,EAAE;;EAExC,OAAOiB,iBAAiB;AAC1B","names":["EventEmitter","React","NativeAppLoading","AppLoading","props","onFinish","Error","startAsync","_isMounted","onError","_emitEvent","_startLoadingAppResourcesAsync","catch","console","error","stack","Component","_lifecycleEmitter","event","emit","getAppLoadingLifecycleEmitter"],"sourceRoot":"","sources":["../../src/launch/AppLoading.tsx"],"sourcesContent":["import { EventEmitter } from 'fbemitter';\nimport React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      startAsync?: () => Promise<void>;\n      onError?: (error: Error) => void;\n      onFinish?: () => void;\n      autoHideSplash?: boolean;\n    }\n  | {\n      startAsync: null;\n      onError: null;\n      onFinish: null;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n    _emitEvent('componentDidMount');\n\n    // startAsync is optional, you can do this process manually if you prefer (this is mainly for\n    // backwards compatibility and it is not recommended)\n    if (this.props.startAsync) {\n      this._startLoadingAppResourcesAsync().catch(error => {\n        console.error(`AppLoading threw an unexpected error when loading:\\n${error.stack}`);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    _emitEvent('componentWillUnmount');\n  }\n\n  _startLoadingAppResourcesAsync = async () => {\n    if (!this.props.onFinish) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync!();\n    } catch (e) {\n      if (!this._isMounted) return;\n\n      if (this.props.onError) {\n        this.props.onError(e);\n      } else {\n        throw e;\n      }\n    } finally {\n      if (!this._isMounted) return;\n\n      // If we get to this point then we know that either there was no error, or the error was\n      // handled.\n      if (this.props.onFinish) {\n        this.props.onFinish();\n      }\n    }\n  };\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nlet _lifecycleEmitter: EventEmitter | null = null;\n\nfunction _emitEvent(event: string): void {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter(): EventEmitter {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}\n"]},"metadata":{},"sourceType":"module"}