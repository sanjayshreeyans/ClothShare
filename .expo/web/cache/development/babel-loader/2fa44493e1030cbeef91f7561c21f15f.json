{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport getChildRouter from \"./getChildRouter\";\nimport getNavigationActionCreators from \"./routers/getNavigationActionCreators\";\nimport getChildrenNavigationCache from \"./getChildrenNavigationCache\";\nimport getEventManager from \"./getEventManager\";\n\nvar createParamGetter = function createParamGetter(route) {\n  return function (paramName, defaultValue) {\n    var params = route.params;\n\n    if (params && paramName in params) {\n      return params[paramName];\n    }\n\n    return defaultValue;\n  };\n};\n\nfunction _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  var children = getChildrenNavigationCache(navigation);\n  var childRoute = navigation.state.routes.find(function (r) {\n    return r.key === childKey;\n  });\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  var childRouter = getChildRouter(navigation.router, childRoute.routeName);\n  var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;\n\n  var actionCreators = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, navigation.actions), navigation.router.getActionCreators(childRoute, navigation.state.key)), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}), getNavigationActionCreators(childRoute));\n\n  var actionHelpers = {};\n  Object.keys(actionCreators).forEach(function (actionName) {\n    actionHelpers[actionName] = function () {\n      var actionCreator = actionCreators[actionName];\n      var action = actionCreator.apply(void 0, arguments);\n      return navigation.dispatch(action);\n    };\n  });\n  var _isFirstRouteInParent = true;\n  var parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    _isFirstRouteInParent = parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (children[childKey] && children[childKey].isFirstRouteInParent() === _isFirstRouteInParent) {\n    children[childKey] = _objectSpread(_objectSpread(_objectSpread({}, children[childKey]), actionHelpers), {}, {\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute)\n    });\n    return children[childKey];\n  } else {\n    var _getEventManager = getEventManager(childKey),\n        addListener = _getEventManager.addListener,\n        emit = _getEventManager.emit;\n\n    children[childKey] = _objectSpread(_objectSpread({}, actionHelpers), {}, {\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n      getChildNavigation: function getChildNavigation(grandChildKey) {\n        return _getChildNavigation(children[childKey], grandChildKey, function () {\n          var nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        });\n      },\n      isFocused: function isFocused() {\n        var currentNavigation = getCurrentParentNavigation();\n\n        if (!currentNavigation) {\n          return false;\n        }\n\n        var _currentNavigation$st = currentNavigation.state,\n            routes = _currentNavigation$st.routes,\n            index = _currentNavigation$st.index;\n\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n\n        if (routes[index].key === childKey) {\n          return true;\n        }\n\n        return false;\n      },\n      isFirstRouteInParent: function isFirstRouteInParent() {\n        return _isFirstRouteInParent;\n      },\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener: addListener,\n      emit: emit\n    });\n    return children[childKey];\n  }\n}\n\nexport default _getChildNavigation;","map":{"version":3,"mappings":"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","names":["getChildRouter","getNavigationActionCreators","getChildrenNavigationCache","getEventManager","createParamGetter","route","paramName","defaultValue","params","getChildNavigation","navigation","childKey","getCurrentParentNavigation","children","childRoute","state","routes","find","r","key","childRouter","router","routeName","focusedGrandChildRoute","index","actionCreators","actions","getActionCreators","actionHelpers","Object","keys","forEach","actionName","actionCreator","action","dispatch","isFirstRouteInParent","parentNavigation","indexOf","getParam","addListener","emit","grandChildKey","nav","isFocused","currentNavigation","getScreenProps","dangerouslyGetParent"],"sources":["getChildNavigation.js"],"sourcesContent":["import getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildrenNavigationCache from './getChildrenNavigationCache';\nimport getEventManager from './getEventManager';\n\nconst createParamGetter = (route) => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = getChildrenNavigationCache(navigation);\n  const childRoute = navigation.state.routes.find((r) => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName);\n\n  // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n  const focusedGrandChildRoute =\n    childRoute.routes && typeof childRoute.index === 'number'\n      ? childRoute.routes[childRoute.index]\n      : null;\n\n  const actionCreators = {\n    ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter\n      ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key)\n      : {}),\n    ...getNavigationActionCreators(childRoute),\n  };\n\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach((actionName) => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  let isFirstRouteInParent = true;\n\n  const parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    isFirstRouteInParent =\n      parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (\n    children[childKey] &&\n    children[childKey].isFirstRouteInParent() === isFirstRouteInParent\n  ) {\n    children[childKey] = {\n      ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n    };\n    return children[childKey];\n  } else {\n    const { addListener, emit } = getEventManager(childKey);\n\n    children[childKey] = {\n      ...actionHelpers,\n\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n\n      getChildNavigation: (grandChildKey) =>\n        getChildNavigation(children[childKey], grandChildKey, () => {\n          const nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        }),\n\n      isFocused: () => {\n        const currentNavigation = getCurrentParentNavigation();\n        if (!currentNavigation) {\n          return false;\n        }\n        const { routes, index } = currentNavigation.state;\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n        if (routes[index].key === childKey) {\n          return true;\n        }\n        return false;\n      },\n      isFirstRouteInParent: () => isFirstRouteInParent,\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener,\n      emit,\n    };\n\n    return children[childKey];\n  }\n}\n\nexport default getChildNavigation;\n"]},"metadata":{},"sourceType":"module"}