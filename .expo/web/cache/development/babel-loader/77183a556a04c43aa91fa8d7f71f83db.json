{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\", \"theme\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nvar urlToPathAndParams = pathUtils.urlToPathAndParams;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n\n  if (isStateful(props)) {\n    return;\n  }\n\n  var navigation = props.navigation,\n      screenProps = props.screenProps,\n      persistNavigationState = props.persistNavigationState,\n      loadNavigationState = props.loadNavigationState,\n      theme = props.theme,\n      containerProps = _objectWithoutProperties(props, _excluded);\n\n  var keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\nvar _reactNavigationIsHydratingState = false;\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    _inherits(NavigationContainer, _React$Component);\n\n    var _super = _createSuper(NavigationContainer);\n\n    function NavigationContainer(props) {\n      var _this;\n\n      _classCallCheck(this, NavigationContainer);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"subs\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"_actionEventSubscribers\", new Set());\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleOpenURL\", function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n            enableURLHandling = _this$props.enableURLHandling,\n            uriPrefix = _this$props.uriPrefix;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n              params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_persistNavigationState\", function _callee(nav) {\n        var persistNavigationState;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                persistNavigationState = _this.props.persistNavigationState;\n\n                if (!persistNavigationState) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(persistNavigationState(nav));\n\n              case 5:\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[2, 7]], Promise);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"dispatch\", function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            _this._persistNavigationState(navState);\n          });\n\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_getScreenProps\", function () {\n        return _this.props.screenProps;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_getTheme\", function () {\n        if (_this.props.theme === 'light' || _this.props.theme === 'dark') {\n          return _this.props.theme;\n        } else if (_this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \".concat(_this.props.theme, \". Only 'light' and 'dark' are supported. Falling back to 'light'\"));\n          return 'light';\n        }\n      });\n\n      validateProps(props);\n      _this._initialAction = NavigationActions.init();\n\n      if (_this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n\n    _createClass(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n\n          return;\n        }\n\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var parsedUrl, userProvidedStartupState, _await$this$getStartu, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;\n\n        return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n\n                if (this._isStateful()) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n                  if (_statefulContainerCount > 0) {\n                    if (Platform.OS === 'ios') {\n                      console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n                    }\n                  }\n                }\n\n                _statefulContainerCount++;\n                this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n                parsedUrl = null;\n                userProvidedStartupState = null;\n\n                if (!(this.props.enableURLHandling !== false)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 11;\n                return _regeneratorRuntime.awrap(this.getStartupParams());\n\n              case 11:\n                _await$this$getStartu = _context2.sent;\n                parsedUrl = _await$this$getStartu.parsedUrl;\n                userProvidedStartupState = _await$this$getStartu.userProvidedStartupState;\n\n              case 14:\n                action = this._initialAction;\n                startupState = this.state.nav;\n\n                if (!startupState && !userProvidedStartupState) {\n                  !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n                  startupState = Component.router.getStateForAction(action);\n                }\n\n                if (userProvidedStartupState) {\n                  startupState = userProvidedStartupState;\n                  _reactNavigationIsHydratingState = true;\n                }\n\n                if (parsedUrl) {\n                  _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;\n                  urlAction = Component.router.getActionForPathAndParams(path, params);\n\n                  if (urlAction) {\n                    !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n                    action = urlAction;\n                    startupState = Component.router.getStateForAction(urlAction, startupState);\n                  }\n                }\n\n                dispatchActions = function dispatchActions() {\n                  return _this2._actionEventSubscribers.forEach(function (subscriber) {\n                    return subscriber({\n                      type: 'action',\n                      action: action,\n                      state: _this2.state.nav,\n                      lastState: null\n                    });\n                  });\n                };\n\n                if (!(startupState === this.state.nav)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                dispatchActions();\n                return _context2.abrupt(\"return\");\n\n              case 23:\n                this.setState({\n                  nav: startupState\n                }, function () {\n                  _reactNavigationIsHydratingState = false;\n                  dispatchActions();\n                });\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"getStartupParams\",\n      value: function getStartupParams() {\n        var _this$props2, uriPrefix, loadNavigationState, url, loadedNavState, _await$Promise$all, _await$Promise$all2;\n\n        return _regeneratorRuntime.async(function getStartupParams$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = this.props, uriPrefix = _this$props2.uriPrefix, loadNavigationState = _this$props2.loadNavigationState;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]));\n\n              case 4:\n                _await$Promise$all = _context3.sent;\n                _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n                url = _await$Promise$all2[0];\n                loadedNavState = _await$Promise$all2[1];\n                _context3.next = 12;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n\n              case 12:\n                return _context3.abrupt(\"return\", {\n                  parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n                  userProvidedStartupState: loadedNavState\n                });\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, [[1, 10]], Promise);\n      }\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$_linkingSub;\n\n        this._isMounted = false;\n\n        if ((_this$_linkingSub = this._linkingSub) === null || _this$_linkingSub === void 0 ? void 0 : _this$_linkingSub.remove) {\n          var _this$_linkingSub2;\n\n          (_this$_linkingSub2 = this._linkingSub) === null || _this$_linkingSub2 === void 0 ? void 0 : _this$_linkingSub2.remove();\n        } else {\n          Linking.removeEventListener('url', this._handleOpenURL);\n        }\n\n        this.subs && this.subs.remove();\n\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var navigation = this.props.navigation;\n\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n\n          if (!navState) {\n            return this._renderLoading();\n          }\n\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n\n          navigation = this._navigation;\n        }\n\n        invariant(navigation, 'failed to get navigation');\n        return React.createElement(ThemeProvider, {\n          value: this._getTheme()\n        }, React.createElement(NavigationProvider, {\n          value: navigation\n        }, React.createElement(Component, _extends({}, this.props, {\n          navigation: navigation\n        }))));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n\n    return NavigationContainer;\n  }(React.Component);\n\n  _defineProperty(NavigationContainer, \"router\", Component.router);\n\n  _defineProperty(NavigationContainer, \"navigationOptions\", null);\n\n  _defineProperty(NavigationContainer, \"defaultProps\", {\n    theme: 'light'\n  });\n\n  return NavigationContainer;\n}","map":{"version":3,"mappings":"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","names":["React","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","constructor","_defineProperty","Set","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","nav","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","_actionEventSubscribers","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_persistNavigationState","_initialAction","init","_isStateful","BackHandler","addEventListener","subs","_isMounted","remove","back","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","NODE_ENV","detached","Platform","OS","_linkingSub","Linking","_handleOpenURL","userProvidedStartupState","getStartupParams","startupState","urlAction","dispatchActions","Promise","all","getInitialURL","loadedNavState","componentDidCatch","e","componentWillUnmount","_this$_linkingSub","removeEventListener","render","_navigation","_getScreenProps","value","_getTheme","nextProps"],"sources":["createAppContainer.js"],"sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"]},"metadata":{},"sourceType":"module"}