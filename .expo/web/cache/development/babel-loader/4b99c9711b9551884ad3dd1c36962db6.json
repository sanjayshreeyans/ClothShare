{"ast":null,"code":"import ReactNativePlatform from \"react-native-web/dist/exports/Platform\";\nimport { isDOMAvailable, canUseEventListeners, canUseViewport } from \"./environment/browser\";\nvar Platform = {\n  OS: ReactNativePlatform.OS,\n  select: ReactNativePlatform.select,\n  isDOMAvailable: isDOMAvailable,\n  canUseEventListeners: canUseEventListeners,\n  canUseViewport: canUseViewport\n};\nexport default Platform;","map":{"version":3,"mappings":";AAEA,SAASA,cAAT,EAAyBC,oBAAzB,EAA+CC,cAA/C;AAMA,IAAMC,QAAQ,GAAG;EAKfC,EAAE,EAAEC,mBAAmB,CAACD,EALT;EAcfE,MAAM,EAAED,mBAAmB,CAACC,MAdb;EAmBfN,cAAc,EAAdA,cAnBe;EAyBfC,oBAAoB,EAApBA,oBAzBe;EA+BfC,cAAc,EAAdA;AA/Be,CAAjB;AAkCA,eAAeC,QAAf","names":["isDOMAvailable","canUseEventListeners","canUseViewport","Platform","OS","ReactNativePlatform","select"],"sourceRoot":"","sources":["../src/Platform.ts"],"sourcesContent":["import { Platform as ReactNativePlatform, PlatformOSType } from 'react-native';\n\nimport { isDOMAvailable, canUseEventListeners, canUseViewport } from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: ReactNativePlatform.select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n};\n\nexport default Platform;\n"]},"metadata":{},"sourceType":"module"}