{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport invariant from \"./utils/invariant\";\nvar StateUtils = {\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      return state;\n    }\n\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index\n    });\n  },\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread(_objectSpread({}, replaced), {}, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n  replaceAt: function replaceAt(state, key, route) {\n    var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var index = StateUtils.indexOf(state, key);\n    var nextIndex = preserveIndex ? state.index : index;\n    var nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index,\n      routes: routes\n    });\n  },\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":{"version":3,"mappings":"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","names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"sources":["StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]},"metadata":{},"sourceType":"module"}