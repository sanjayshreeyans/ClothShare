{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/sanjayshreeyansgmail.com/Documents/Dev/react-cloth-sharing/ClothShare/node_modules/@expo/vector-icons/build/createIconSet.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = _defineProperty({}, fontName, expoAssetId);\n\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (!this.state.fontIsLoaded) {\n          return React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 28\n            }\n          });\n        }\n\n        return React.createElement(RNVIconComponent, _extends({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }\n        }));\n      }\n    }]);\n\n    return Icon;\n  }(React.Component), _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAsC,OAAtC;;AAGA,OAAOC,aAAP;AACA,OAAOC,yBAAP;AAEA,SACEC,kBADF,EAEEC,iBAFF;AAiEA,eAAc,UACZC,QADY,EAEZC,QAFY,EAGZC,WAHY,EAIZC,SAJY,EAIG;;;EAEf,IAAMC,IAAI,uBAAMH,QAAN,EAAiBC,WAAjB,CAAV;;EACA,IAAMG,gBAAgB,GAAGT,aAAa,CAACI,QAAD,EAAWC,QAAX,EAAqB,IAArB,EAA2BE,SAA3B,CAAtC;EAEA;IAAA;;IAAA;;IAAO;MAAA;;MAAA;;;MAUL,iBAAW,KAAX;MAGA,cAAQ;QACNG,YAAY,EAAEZ,IAAI,CAACa,QAAL,CAAcN,QAAd;MADR,CAAR;MAbK;IAiDN;;IAjDD;MAAA;MAAA,OAiBE;QAAA;UAAA;YAAA;cAAA;gBACE,KAAKO,QAAL,GAAgB,IAAhB;;gBADF,IAEO,KAAKC,KAAL,CAAWH,YAFlB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,iCAGUZ,IAAI,CAACgB,SAAL,CAAeN,IAAf,CAHV;;cAAA;gBAII,KAAKI,QAAL,IAAiB,KAAKG,QAAL,CAAc;kBAAEL,YAAY,EAAE;gBAAhB,CAAd,CAAjB;;cAJJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAjBF;MAAA;MAAA,OAyBE,gCAAoB;QAClB,KAAKE,QAAL,GAAgB,KAAhB;MACD;IA3BH;MAAA;MAAA,OA6BE,wBAAeI,KAAf,EAAoB;QAClB,IAAI,KAAKC,KAAT,EAAgB;UACd,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,KAA1B;QACD;MACF;IAjCH;MAAA;MAAA,OAmCE,kBAAM;QAAA;;QACJ,IAAI,CAAC,KAAKH,KAAL,CAAWH,YAAhB,EAA8B;UAC5B,OAAO,oBAAC,IAAD;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EAAP;QACD;;QAED,OACE,oBAAC,gBAAD;UACE,GAAG,EAAE,iBAAI,EAAG;YACV,MAAI,CAACO,KAAL,GAAaE,IAAb;UACD;QAHH,GAIM,KAAKH,KAJX;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GADF;MAQD;IAhDH;;IAAA;EAAA,EAA0BjB,KAAK,CAACqB,SAAhC,GACSC,eAAYZ,gBAAgB,CAACa,SADtC,EAESD,kBAAeZ,gBAAgB,CAACc,YAFzC,EAGSF,YAASpB,yBAAyB,CAACoB,EAAD,CAH3C,EAISA,cAAWjB,QAJpB,EAKSiB,oBAAiB;IAAA,OAAMjB,QAAN;EAAA,CAL1B,EAMSiB,mBAAgB;IAAA,OAAMhB,QAAN;EAAA,CANzB,EAOSgB,cAAW;IAAA,OAAMvB,IAAI,CAACgB,SAAL,CAAeN,IAAf,CAAN;EAAA,CAPpB,EAQSa,UAAOb,IARhB;AAkDD","names":["Font","React","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","fontIsLoaded","isLoaded","_mounted","state","loadAsync","setState","props","_icon","setNativeProps","view","Component","_a","propTypes","defaultProps"],"sourceRoot":"","sources":["../src/createIconSet.tsx"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport { Text, TextProps, TouchableHighlightProps, ViewProps } from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconButtonProps<GLYPHS extends string> extends ViewProps, TouchableHighlightProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number }\n\nexport interface Icon<G extends string, FN extends string> {\n  propTypes: any;\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function<G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}