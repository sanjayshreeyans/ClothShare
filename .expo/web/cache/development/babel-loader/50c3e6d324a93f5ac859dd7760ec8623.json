{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');\n  }\n}\nexport function getExponentPushTokenAsync() {\n  var data, experienceId, tokenArguments, response;\n  return _regeneratorRuntime.async(function getExponentPushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!Constants.manifest.owner || !Constants.manifest.slug)) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());\n\n        case 4:\n          data = _context.sent;\n          experienceId = \"@\" + Constants.manifest.owner + \"/\" + Constants.manifest.slug;\n          tokenArguments = {\n            deviceId: Constants.installationId,\n            experienceId: experienceId,\n            appId: experienceId,\n            deviceToken: JSON.stringify(data),\n            type: 'web'\n          };\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n            method: 'POST',\n            body: JSON.stringify(tokenArguments)\n          }).then(function (response) {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return response;\n          }).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            throw new CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with Expo. (' + error + ')');\n          }));\n\n        case 9:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.data.expoPushToken);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());\n\n        case 2:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            type: Platform.OS,\n            data: data\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _subscribeUserToPushAsync() {\n  var registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime.async(function _subscribeUserToPushAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey)) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 2:\n          guardPermission();\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.register('/expo-service-worker.js'));\n\n        case 5:\n          registration = _context3.sent;\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);\n\n        case 8:\n          if (registration.active) {\n            _context3.next = 10;\n            break;\n          }\n\n          throw new Error('Notifications might not be working because the service worker API is not active.');\n\n        case 10:\n          subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n          };\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions).catch(function (error) {\n            throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n          }));\n\n        case 13:\n          pushSubscription = _context3.sent;\n          pushSubscriptionJson = pushSubscription.toJSON();\n          subscriptionObject = {\n            endpoint: pushSubscriptionJson.endpoint,\n            keys: {\n              p256dh: pushSubscriptionJson.keys.p256dh,\n              auth: pushSubscriptionJson.keys.auth\n            }\n          };\n          notificationIcon = (Constants.manifest.notification || {}).icon;\n          _context3.next = 19;\n          return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({\n            fromExpoWebClient: {\n              notificationIcon: notificationIcon\n            }\n          })));\n\n        case 19:\n          return _context3.abrupt(\"return\", subscriptionObject);\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"mappings":"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","names":["CodedError","Constants","guardPermission","window","Error","navigator","serviceWorker","Notification","permission","getExponentPushTokenAsync","manifest","owner","slug","_subscribeUserToPushAsync","data","experienceId","tokenArguments","deviceId","installationId","appId","deviceToken","JSON","stringify","type","fetch","method","body","then","response","ok","statusText","json","catch","error","expoPushToken","getDevicePushTokenAsync","Platform","OS","notification","vapidPublicKey","register","registration","ready","active","subscribeOptions","userVisibleOnly","applicationServerKey","_urlBase64ToUint8Array","pushManager","subscribe","pushSubscription","pushSubscriptionJson","toJSON","subscriptionObject","endpoint","keys","p256dh","auth","notificationIcon","icon","postMessage","fromExpoWebClient","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sourceRoot":"","sources":["../../src/Notifications/ExponentNotificationsHelper.web.ts"],"sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nexport async function getExponentPushTokenAsync(): Promise<string> {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n  const tokenArguments: { [key: string]: string } = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web',\n  };\n\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with Expo. (' + error + ')'\n      );\n    });\n\n  return response.data.expoPushToken;\n}\n\nexport async function getDevicePushTokenAsync(): Promise<{ type: string; data: object }> {\n  const data = await _subscribeUserToPushAsync();\n  return { type: Platform.OS, data };\n}\n\nasync function _subscribeUserToPushAsync(): Promise<object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error(\n      'Notifications might not be working because the service worker API is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager\n    .subscribe(subscribeOptions)\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with the browser endpoint. (' +\n          error +\n          ')'\n      );\n    });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"]},"metadata":{},"sourceType":"module"}