{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nexport default {\n  addEventListener: function addEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function canOpenURL(url) {\n    return _regeneratorRuntime.async(function canOpenURL$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", true);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getInitialURL: function getInitialURL() {\n    return _regeneratorRuntime.async(function getInitialURL$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (canUseDOM) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", '');\n\n          case 2:\n            return _context2.abrupt(\"return\", window.location.href);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  openURL: function openURL(url) {\n    return _regeneratorRuntime.async(function openURL$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (canUseDOM) {\n              window.location = new URL(url, window.location).toString();\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAIA,IAAMC,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAMC,SAAS,GAAmE,EAAlF;AAEA,eAAe;EACbC,gBADa,4BACIC,IADJ,EACiBC,QADjB,EACsC;IACjDL,SAAS,CACPC,UAAU,CAACK,OAAX,CAAmBF,IAAnB,MAA6B,CAAC,CADvB,mCAEwBA,IAFxB,2BAAT;;IAIA,IAAMG,cAAc,GAAsB,SAApCA,cAAoC,YAAW;MAAA,OACnDF,QAAQ,CAAC;QAAEG,GAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IAAvB;QAA6BC,WAAW,EAAXA;MAA7B,CAAD,CAD2C;IAAA,CAArD;;IAEAV,SAAS,CAACW,IAAV,CAAe;MAAER,QAAQ,EAARA,QAAF;MAAYE,cAAc,EAAdA;IAAZ,CAAf;IACAE,MAAM,CAACN,gBAAP,CAAwB,SAAxB,EAAmCI,cAAnC,EAAmD,KAAnD;EACD,CAVY;EAYbO,mBAZa,+BAYOV,IAZP,EAYoBC,QAZpB,EAYyC;IACpDL,SAAS,CACPC,UAAU,CAACK,OAAX,CAAmBF,IAAnB,MAA6B,CAAC,CADvB,sCAE2BA,IAF3B,4BAAT;IAIA,IAAMW,aAAa,GAAGb,SAAS,CAACc,SAAV,CAAoB,cAAI;MAAA,OAAIC,IAAI,CAACZ,QAAL,KAAkBA,QAAtB;IAAA,CAAxB,CAAtB;IACAL,SAAS,CACPe,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;IAIA,IAAMR,cAAc,GAAGL,SAAS,CAACa,aAAD,CAAT,CAAyBR,cAAhD;IACAE,MAAM,CAACK,mBAAP,CAA2B,SAA3B,EAAsCP,cAAtC,EAAsD,KAAtD;IACAL,SAAS,CAACgB,MAAV,CAAiBH,aAAjB,EAAgC,CAAhC;EACD,CAzBY;EA2BPI,UA3BO,sBA2BIX,GA3BJ;IAAA;MAAA;QAAA;UAAA;YAAA,iCA6BJ,IA7BI;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAgCPY,aAhCO;IAAA;MAAA;QAAA;UAAA;YAAA,IAiCNrB,SAjCM;cAAA;cAAA;YAAA;;YAAA,kCAiCY,EAjCZ;;UAAA;YAAA,kCAkCJU,MAAM,CAACC,QAAP,CAAgBC,IAlCZ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAqCPU,OArCO,mBAqCCb,GArCD;IAAA;MAAA;QAAA;UAAA;YAsCX,IAAIT,SAAJ,EAAe;cAEbU,MAAM,CAACC,QAAP,GAAkB,IAAIY,GAAJ,CAAQd,GAAR,EAAaC,MAAM,CAACC,QAApB,EAA8Ba,QAA9B,EAAlB;YACD;;UAzCU;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAAA,CAAf","names":["canUseDOM","invariant","EventTypes","listeners","addEventListener","type","listener","indexOf","nativeListener","url","window","location","href","nativeEvent","push","removeEventListener","listenerIndex","findIndex","pair","splice","canOpenURL","getInitialURL","openURL","URL","toString"],"sourceRoot":"","sources":["../src/ExpoLinking.web.ts"],"sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = nativeEvent =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!canUseDOM) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (canUseDOM) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}