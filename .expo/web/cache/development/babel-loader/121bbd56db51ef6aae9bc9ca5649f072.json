{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport StorageReference from \"./StorageReference\";\nimport StorageStatics from \"./StorageStatics\";\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from \"./utils\";\nimport version from \"./version\";\nvar namespace = 'storage';\nvar nativeEvents = ['storage_event'];\nvar nativeModuleName = 'RNFBStorageModule';\n\nvar FirebaseStorageModule = function (_FirebaseModule) {\n  _inherits(FirebaseStorageModule, _FirebaseModule);\n\n  var _super = _createSuper(FirebaseStorageModule);\n\n  function FirebaseStorageModule(app, config, bucketUrl) {\n    var _this;\n\n    _classCallCheck(this, FirebaseStorageModule);\n\n    _this = _super.call(this, app, config, bucketUrl);\n\n    if (bucketUrl === undefined) {\n      _this._customUrlOrRegion = \"gs://\" + app.options.storageBucket;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\");\n    }\n\n    _this.emitter.addListener(_this.eventNameForApp(nativeEvents[0]), handleStorageEvent.bind(null, _assertThisInitialized(_this)));\n\n    _this.emulatorHost = undefined;\n    _this.emulatorPort = 0;\n    _this._maxUploadRetryTime = _this.native.maxUploadRetryTime || 0;\n    _this._maxDownloadRetryTime = _this.native.maxDownloadRetryTime || 0;\n    _this._maxOperationRetryTime = _this.native.maxOperationRetryTime || 0;\n    return _this;\n  }\n\n  _createClass(FirebaseStorageModule, [{\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    }\n  }, {\n    key: \"maxDownloadRetryTime\",\n    get: function get() {\n      return this._maxDownloadRetryTime;\n    }\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n\n      if (!isString(path)) {\n        throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n      }\n\n      return new StorageReference(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isString(url) || !url.startsWith('gs://') && !url.startsWith('http')) {\n        throw new Error(\"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\");\n      }\n\n      var path;\n      var bucket;\n\n      if (url.startsWith('http')) {\n        var parts = getHttpUrlParts(url);\n\n        if (!parts) {\n          throw new Error(\"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\");\n        }\n\n        bucket = parts.bucket;\n        path = parts.path;\n      } else {\n        var _getGsUrlParts = getGsUrlParts(url);\n\n        bucket = _getGsUrlParts.bucket;\n        path = _getGsUrlParts.path;\n      }\n\n      var storageInstance = this.app.storage(bucket);\n      return new StorageReference(storageInstance, path);\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxOperationRetryTime = time;\n      return this.native.setMaxOperationRetryTime(time);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxUploadRetryTime = time;\n      return this.native.setMaxUploadRetryTime(time);\n    }\n  }, {\n    key: \"setMaxDownloadRetryTime\",\n    value: function setMaxDownloadRetryTime(time) {\n      if (!isNumber(time)) {\n        throw new Error(\"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\");\n      }\n\n      this._maxDownloadRetryTime = time;\n      return this.native.setMaxDownloadRetryTime(time);\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      if (!host || !isString(host) || !port || !isNumber(port)) {\n        throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n      }\n\n      var _host = host;\n\n      if (isAndroid && _host) {\n        if (_host === 'localhost' || _host === '127.0.0.1') {\n          _host = '10.0.2.2';\n          console.log('Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n\n      this.emulatorHost = host;\n      this.emulatorPort = port;\n      this.native.useEmulator(_host, port);\n      return [_host, port];\n    }\n  }]);\n\n  return FirebaseStorageModule;\n}(FirebaseModule);\n\nexport var SDK_VERSION = version;\nexport var STATICS = StorageStatics;\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version: version,\n  namespace: namespace,\n  nativeEvents: nativeEvents,\n  nativeModuleName: nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["isAndroid","isNumber","isString","createModuleNamespace","FirebaseModule","getFirebaseRoot","StorageReference","StorageStatics","getGsUrlParts","getHttpUrlParts","handleStorageEvent","version","namespace","nativeEvents","nativeModuleName","FirebaseStorageModule","app","config","bucketUrl","undefined","_customUrlOrRegion","options","storageBucket","startsWith","Error","emitter","addListener","eventNameForApp","bind","emulatorHost","emulatorPort","_maxUploadRetryTime","native","maxUploadRetryTime","_maxDownloadRetryTime","maxDownloadRetryTime","_maxOperationRetryTime","maxOperationRetryTime","path","url","bucket","parts","storageInstance","storage","time","setMaxOperationRetryTime","setMaxUploadRetryTime","setMaxDownloadRetryTime","host","port","_host","console","log","useEmulator","SDK_VERSION","STATICS","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","disablePrependCustomUrlOrRegion","ModuleClass","firebase"],"sources":["/Users/sanjayshreeyansgmail.com/Documents/Dev/react-cloth-sharing/ClothShare/node_modules/@react-native-firebase/storage/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isAndroid, isNumber, isString } from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport StorageReference from './StorageReference';\nimport StorageStatics from './StorageStatics';\nimport { getGsUrlParts, getHttpUrlParts, handleStorageEvent } from './utils';\nimport version from './version';\n\nconst namespace = 'storage';\nconst nativeEvents = ['storage_event'];\nconst nativeModuleName = 'RNFBStorageModule';\n\nclass FirebaseStorageModule extends FirebaseModule {\n  constructor(app, config, bucketUrl) {\n    super(app, config, bucketUrl);\n    if (bucketUrl === undefined) {\n      this._customUrlOrRegion = `gs://${app.options.storageBucket}`;\n    } else if (!isString(bucketUrl) || !bucketUrl.startsWith('gs://')) {\n      throw new Error(\n        \"firebase.app().storage(*) bucket url must be a string and begin with 'gs://'\",\n      );\n    }\n\n    this.emitter.addListener(\n      this.eventNameForApp(nativeEvents[0]),\n      handleStorageEvent.bind(null, this),\n    );\n\n    // Emulator instance vars needed to send through on iOS, iOS does not persist emulator state between calls\n    this.emulatorHost = undefined;\n    this.emulatorPort = 0;\n    this._maxUploadRetryTime = this.native.maxUploadRetryTime || 0;\n    this._maxDownloadRetryTime = this.native.maxDownloadRetryTime || 0;\n    this._maxOperationRetryTime = this.native.maxOperationRetryTime || 0;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxuploadretrytime\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setmaxdownloadretrytime\n   */\n  get maxDownloadRetryTime() {\n    return this._maxDownloadRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#maxoperationretrytime\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   */\n  ref(path = '/') {\n    if (!isString(path)) {\n      throw new Error(\"firebase.storage().ref(*) 'path' must be a string value.\");\n    }\n\n    return new StorageReference(this, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   */\n  refFromURL(url) {\n    if (!isString(url) || (!url.startsWith('gs://') && !url.startsWith('http'))) {\n      throw new Error(\n        \"firebase.storage().refFromURL(*) 'url' must be a string value and begin with 'gs://' or 'https://'.\",\n      );\n    }\n\n    let path;\n    let bucket;\n\n    if (url.startsWith('http')) {\n      const parts = getHttpUrlParts(url);\n      if (!parts) {\n        throw new Error(\n          \"firebase.storage().refFromURL(*) unable to parse 'url', ensure it's a valid storage url'.\",\n        );\n      }\n      ({ bucket, path } = parts);\n    } else {\n      ({ bucket, path } = getGsUrlParts(url));\n    }\n\n    const storageInstance = this.app.storage(bucket);\n    return new StorageReference(storageInstance, path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   */\n  setMaxOperationRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxOperationRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxOperationRetryTime = time;\n    return this.native.setMaxOperationRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   */\n  setMaxUploadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\"firebase.storage().setMaxUploadRetryTime(*) 'time' must be a number value.\");\n    }\n\n    this._maxUploadRetryTime = time;\n    return this.native.setMaxUploadRetryTime(time);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxDownloadRetryTime\n   */\n  setMaxDownloadRetryTime(time) {\n    if (!isNumber(time)) {\n      throw new Error(\n        \"firebase.storage().setMaxDownloadRetryTime(*) 'time' must be a number value.\",\n      );\n    }\n\n    this._maxDownloadRetryTime = time;\n    return this.native.setMaxDownloadRetryTime(time);\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.storage().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    if (isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping storage host to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n        );\n      }\n    }\n    this.emulatorHost = host;\n    this.emulatorPort = port;\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/storage';\nexport const SDK_VERSION = version;\n\n// import { STATICS } from '@react-native-firebase/storage';\nexport const STATICS = StorageStatics;\n\n// import storage from '@react-native-firebase/storage';\n// storage().X(...);\nexport default createModuleNamespace({\n  statics: StorageStatics,\n  version,\n  namespace,\n  nativeEvents,\n  nativeModuleName,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: true,\n  disablePrependCustomUrlOrRegion: true,\n  ModuleClass: FirebaseStorageModule,\n});\n\n// import storage, { firebase } from '@react-native-firebase/storage';\n// storage().X(...);\n// firebase.storage().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}