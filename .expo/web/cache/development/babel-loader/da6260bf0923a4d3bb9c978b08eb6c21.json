{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/brentvatne/code/react-native-appearance/src/NativeAppearance.web.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport SyntheticPlatformEmitter from \"./web/SyntheticPlatformEmitter\";\n\nfunction getQuery() {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query) {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport var NativeAppearance = {\n  get name() {\n    return 'NativeAppearance';\n  },\n\n  get initialPreferences() {\n    var query = getQuery();\n\n    if (isMediaQueryList(query)) {\n      return {\n        colorScheme: query.matches ? 'dark' : 'light'\n      };\n    }\n\n    return {\n      colorScheme: 'no-preference'\n    };\n  }\n\n};\nexport function NativeAppearanceProvider(props) {\n  React.useEffect(function () {\n    var query = getQuery();\n\n    function listener(_ref) {\n      var matches = _ref.matches;\n      var colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme: colorScheme\n      });\n    }\n\n    if (query) query.addListener(listener);\n    return function () {\n      if (query) {\n        query.removeListener(listener);\n      }\n    };\n  }, []);\n  return React.createElement(View, _extends({\n    style: {\n      flex: 1\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    }\n  }));\n}\n;","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAKA,OAAOC,wBAAP;;AAEA,SAASC,QAAT,GAA2C;EACzC,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAACA,MAAM,CAACC,UAA7C,EAAyD,OAAO,IAAP;EACzD,OAAOD,MAAM,CAACC,UAAPD,CAAkB,8BAAlBA,CAAP;AAGF;;AAAA,SAASE,gBAAT,CAA0BC,KAA1B,EAA+D;EAC7D,OAAOA,KAAK,IAAIA,KAAK,CAACC,WAAfD,IAA8BA,KAAK,CAACE,cAApCF,IAAsD,OAAOA,KAAK,CAACG,OAAb,KAAyB,SAAtF;AAGF;;AAAA,OAAO,IAAMC,gBAAgB,GAAG;EAC9B,IAAIC,IAAJ,GAAmB;IACjB,OAAO,kBAAP;EAF4B;;EAI9B,IAAIC,kBAAJ,GAAgD;IAC9C,IAAMN,KAAK,GAAGJ,QAAQ,EAAtB;;IACA,IAAIG,gBAAgB,CAACC,KAAD,CAApB,EAA6B;MAC3B,OAAO;QAAEO,WAAW,EAAEP,KAAK,CAACG,OAANH,GAAgB,MAAhBA,GAAyB;MAAxC,CAAP;IAEF;;IAAA,OAAO;MAAEO,WAAW,EAAE;IAAf,CAAP;EAT4B;;AAAA,CAAzB;AAaP,OAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAA8C;EACnDf,KAAK,CAACgB,SAANhB,CAAgB,YAAM;IACpB,IAAMM,KAAK,GAAGJ,QAAQ,EAAtB;;IAEA,SAASe,QAAT,OAAoD;MAAA,IAAhCR,OAAgC,QAAhCA,OAAgC;MAClD,IAAMI,WAAW,GAAGJ,OAAO,GAAG,MAAH,GAAY,OAAvC;MACAR,wBAAwB,CAACiB,IAAzBjB,CAA8B,mBAA9BA,EAAmD;QACjDY,WAAW,EAAXA;MADiD,CAAnDZ;IAKF;;IAAA,IAAIK,KAAJ,EACEA,KAAK,CAACC,WAAND,CAAkBW,QAAlBX;IAEF,OAAO,YAAM;MACX,IAAIA,KAAJ,EAAW;QACTA,KAAK,CAACE,cAANF,CAAqBW,QAArBX;MAEH;IAJD;EAbF,GAkBG,EAlBHN;EAoBA,OAAOA,oBAACmB,IAAD;IAAMC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAR;EAAb,GAA8BN,KAA9B;IAAAO;MAAAC;MAAAC;IAAA;EAAA,GAAP;AACD;AAAA","names":["React","SyntheticPlatformEmitter","getQuery","window","matchMedia","isMediaQueryList","query","addListener","removeListener","matches","NativeAppearance","name","initialPreferences","colorScheme","NativeAppearanceProvider","props","useEffect","listener","emit","View","style","flex","__source","fileName","lineNumber"],"sources":["NativeAppearance.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { AppearancePreferences } from './Appearance.types';\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nfunction getQuery(): MediaQueryList | null {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    const query = getQuery();\n    if (isMediaQueryList(query)) {\n      return { colorScheme: query.matches ? 'dark' : 'light' }\n    }\n    return { colorScheme: 'no-preference' };\n  },\n};\n\nexport function NativeAppearanceProvider(props: any) {\n  React.useEffect(() => {\n    const query = getQuery();\n\n    function listener({ matches }: MediaQueryListEvent) {\n      const colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme,\n      });\n    }\n\n    if (query)\n      query.addListener(listener);\n\n    return () => {\n      if (query) {\n        query.removeListener(listener)\n      }\n    }\n  }, []);\n\n  return <View style={{ flex: 1 }} {...props} />\n};\n"]},"metadata":{},"sourceType":"module"}